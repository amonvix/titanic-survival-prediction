# üìç Caminho: .github/workflows/deploy-aws.yml
name: üöÄ AWS Deploy - Terraform + ECS Fargate

on:
  push:
    branches:
      - main         # Dispara automaticamente ao fazer push na main
  workflow_dispatch:  # Permite rodar manualmente no GitHub Actions

permissions:
  contents: read

jobs:
  deploy:
    name: üì¶ Deploy to AWS ECS Fargate
    runs-on: ubuntu-latest

    steps:
      #############################################
      # 1Ô∏è‚É£ Checkout do c√≥digo
      #############################################
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      #############################################
      # 2Ô∏è‚É£ Configura√ß√£o das credenciais AWS (usando secrets)
      #############################################
      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      #############################################
      # 3Ô∏è‚É£ Instala√ß√£o do Terraform
      #############################################
      - name: üì¶ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      #############################################
      # 4Ô∏è‚É£ Inicializa√ß√£o do Terraform
      #############################################
      - name: ‚öôÔ∏è Terraform Init
        working-directory: infra
        run: terraform init

      #############################################
      # 5Ô∏è‚É£ Cria√ß√£o/atualiza√ß√£o da infraestrutura (ECR, ECS, SG, etc)
      #############################################
      - name: üõ†Ô∏è Terraform Apply (infra inicial)
        working-directory: infra
        run: terraform apply -auto-approve

      #############################################
      # 6Ô∏è‚É£ Login no ECR
      #############################################
      - name: üîì Login to Amazon ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region "$AWS_REGION" \
            | docker login --username AWS --password-stdin \
              "$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${AWS_REGION}.amazonaws.com"

      #############################################
      # 7Ô∏è‚É£ Build da imagem com duas tags (latest e SHA)
      #############################################
      - name: üèóÔ∏è Build Docker image
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ steps.aws.outputs.id }}
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/titanic-api"
          docker build -t "$ECR_REPO:latest" -t "$ECR_REPO:${{ github.sha }}" .
          echo "‚úÖ Imagem constru√≠da com sucesso."

      #############################################
      # 8Ô∏è‚É£ Push das duas tags para o ECR
      #############################################
      - name: üì§ Push Docker image to ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/titanic-api"
          docker push "$ECR_REPO:latest"
          docker push "$ECR_REPO:${{ github.sha }}"
          echo "‚úÖ Imagem enviada ao ECR."

      #############################################
      # 9Ô∏è‚É£ Terraform Apply final para atualizar a imagem (caso necess√°rio)
      #############################################
      - name: üì¶ Terraform Apply (com imagem atualizada)
        working-directory: infra
        run: terraform apply -auto-approve

      #############################################
      # üîü Resumo final no log
      #############################################
      - name: ‚úÖ Deployment Summary
        run: |
          echo "‚úÖ Deploy finalizado com sucesso!"
          echo "üìç Imagem em: latest e ${{ github.sha }}"
          echo "üöÄ ECS Fargate em execu√ß√£o."
